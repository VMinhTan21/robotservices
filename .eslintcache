[{"/home/minhtan/Desktop/source_robot/robotservices/src/index.js":"1","/home/minhtan/Desktop/source_robot/robotservices/src/App.js":"2","/home/minhtan/Desktop/source_robot/robotservices/src/reportWebVitals.js":"3","/home/minhtan/Desktop/source_robot/robotservices/src/components/Header.jsx":"4","/home/minhtan/Desktop/source_robot/robotservices/src/components/Footer.jsx":"5","/home/minhtan/Desktop/source_robot/robotservices/src/components/Body.jsx":"6","/home/minhtan/Desktop/source_robot/robotservices/src/components/About.jsx":"7","/home/minhtan/Desktop/source_robot/robotservices/src/components/Home.jsx":"8","/home/minhtan/Desktop/source_robot/robotservices/src/components/Connection.jsx":"9","/home/minhtan/Desktop/source_robot/robotservices/src/components/RobotState.jsx":"10","/home/minhtan/Desktop/source_robot/robotservices/src/components/SetGoal_1.jsx":"11","/home/minhtan/Desktop/source_robot/robotservices/src/components/Teleoperation.jsx":"12","/home/minhtan/Desktop/source_robot/robotservices/src/components/SetGoal_2.jsx":"13","/home/minhtan/Desktop/source_robot/robotservices/src/components/Map.jsx":"14","/home/minhtan/Desktop/source_robot/robotservices/src/scripts/config.js":"15"},{"size":544,"mtime":1687020422842,"results":"16","hashOfConfig":"17"},{"size":270,"mtime":1687020422838,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1687020422842,"results":"19","hashOfConfig":"17"},{"size":691,"mtime":1687020422842,"results":"20","hashOfConfig":"17"},{"size":296,"mtime":1687020422842,"results":"21","hashOfConfig":"17"},{"size":548,"mtime":1687020422842,"results":"22","hashOfConfig":"17"},{"size":324,"mtime":1687020422842,"results":"23","hashOfConfig":"17"},{"size":1032,"mtime":1687020422842,"results":"24","hashOfConfig":"17"},{"size":1759,"mtime":1687020422842,"results":"25","hashOfConfig":"17"},{"size":3936,"mtime":1687020422842,"results":"26","hashOfConfig":"17"},{"size":1904,"mtime":1687020422842,"results":"27","hashOfConfig":"17"},{"size":3149,"mtime":1687020422842,"results":"28","hashOfConfig":"17"},{"size":3478,"mtime":1687020564349,"results":"29","hashOfConfig":"17"},{"size":1490,"mtime":1687020422842,"results":"30","hashOfConfig":"17"},{"size":267,"mtime":1687020814855,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"15o5hq3",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/minhtan/Desktop/source_robot/robotservices/src/index.js",[],["70","71"],"/home/minhtan/Desktop/source_robot/robotservices/src/App.js",[],"/home/minhtan/Desktop/source_robot/robotservices/src/reportWebVitals.js",[],"/home/minhtan/Desktop/source_robot/robotservices/src/components/Header.jsx",[],"/home/minhtan/Desktop/source_robot/robotservices/src/components/Footer.jsx",[],"/home/minhtan/Desktop/source_robot/robotservices/src/components/Body.jsx",[],"/home/minhtan/Desktop/source_robot/robotservices/src/components/About.jsx",[],"/home/minhtan/Desktop/source_robot/robotservices/src/components/Home.jsx",["72","73","74"],"import React, { Component } from \"react\";\nimport Connection from \"./Connection\";\nimport RobotState from \"./RobotState\";\nimport Teleoperation from \"./Teleoperation\";\nimport Map from \"./Map\";\nimport SetGoal_1 from \"./SetGoal_1\";\nimport SetGoal_2 from \"./SetGoal_2\";\n\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nclass Home extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <Container>\n          <h1 className=\"text-center mt-3\">Robot Control Page</h1>\n          <Row>\n            <Col>\n              <Connection />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Teleoperation />\n              <SetGoal_1 />\n              <SetGoal_2 />\n            </Col>\n          </Row>\n          <Row>\n            {\" \"}\n            <Col>\n              <RobotState />\n            </Col>\n            <Col>\n              <h1>MAP</h1>\n              <Map></Map>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/home/minhtan/Desktop/source_robot/robotservices/src/components/Connection.jsx",["75"],"import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Alert\n          className=\"text-center m-3\"\n          variant={this.state.connected ? \"success\" : \"danger\"}\n        >\n          {this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Connection;\n","/home/minhtan/Desktop/source_robot/robotservices/src/components/RobotState.jsx",["76","77","78"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    x: 0,\n    y: 0,\n    orientation: 0,\n    linear_velocity: 0,\n    angular_velocity: 0,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  componentDidMount() {\n    this.getRobotState();\n  }\n\n  getRobotState() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.POSE_TOPIC,\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Position</h4>\n            <p className=\"mt-0\">x: {this.state.x}</p>\n            <p className=\"mt-0\">y: {this.state.y}</p>\n            <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Velocities</h4>\n            <p className=\"mt-0\">\n              Linear Velocity: {this.state.linear_velocity}\n            </p>\n            <p className=\"mt-0\">\n              Angular Velocity: {this.state.angular_velocity}\n            </p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n","/home/minhtan/Desktop/source_robot/robotservices/src/components/SetGoal_1.jsx",["79","80","81","82"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\n\nimport Config from \"../scripts/config\";\n\nclass SetGoal_1 extends Component {\n    state = { ros: null }\n\n    constructor() {\n        super()\n\n        this.init_connection()\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_1 sent command\")\n\n        var cmdService = new window.ROSLIB.Service({\n            ros: this.state.ros,\n            name: '/setgoal/setgoal',\n            serviceType: 'setgoal/msgs'\n        })\n\n        var request = new window.ROSLIB.ServiceRequest({\n            package_name: 'navstack_pub',\n            launch_file: 'set_goals1'\n        })\n\n        cmdService.callService(request, function(response) {\n            console.log('Service call: ', response);\n        })\n    }\n\n    init_connection() {\n        this.setState(\n            {\n                ros: new window.ROSLIB.Ros()\n            }\n        )\n\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_2 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_1 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand() {\n        console.log(\"SetGoal_1 sent command\")\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand}>\n                    SET GOAL 1\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_1","/home/minhtan/Desktop/source_robot/robotservices/src/components/Teleoperation.jsx",["83"],"import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n  state = { ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  handleMove(event) {\n    console.log(\"handle move\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"handle stop\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n\n  render() {\n    return (\n      <div>\n        <Joystick\n          size={100}\n          baseColor=\"#EEEEEE\"\n          stickColor=\"#BBBBBB\"\n          move={this.handleMove}\n          stop={this.handleStop}\n        ></Joystick>\n      </div>\n    );\n  }\n}\n\nexport default Teleoperation;\n","/home/minhtan/Desktop/source_robot/robotservices/src/components/SetGoal_2.jsx",["84","85","86","87"],"import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\n\nimport Config from \"../scripts/config\"\n\n\n\nclass SetGoal_2 extends Component {\n    state = { ros: null }\n\n    constructor() {\n        super()\n\n        this.init_connection()\n\n        this.sendCommand = this.sendCommand.bind(this)\n    }\n\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros()\n\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_2 - Connected\")\n        } catch (error) {\n            console.log(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT +\n                \"\"\n            )\n            console.log(\"SetGoal_2 - cannot connect to the WS robot. Try again after 1 second\");\n        }\n    }\n\n    sendCommand(event) {\n        console.log(\"SetGoal_2 sent command\")\n\n        // var cmdService = new window.ROSLIB.Service({\n        //     ros: this.state.ros,\n        //     name: '/setgoal/setgoal',\n        //     serviceType: 'setgoal/msgs'\n        // })\n\n        // var cmdService_test = new window.ROSLIB.Service({\n        //     ros: this.state.ros,\n        //     name: '/map_server',\n        //     serviceType: 'map_server/map_server'\n        // })\n\n        // var request = new window.ROSLIB.ServiceRequest({\n        //     package_name: 'map_server',\n        //     launch_file: 'map.yaml'\n        // })\n\n        // cmdService_test.callService(request, function(response) {\n        //     console.log('Service call: ', response);\n        // })\n\n        // const cmd = new window.ROSLIB.Topic({\n        //     ros: this.state.ros,\n        //     name: '/run_command',  // Replace with an appropriate topic name\n        //     messageType: 'std_msgs/String'\n        //   });\n\n        // const runCommand = new window.ROSLIB.Message({\n        //     data: 'rosrun your_package your_executable'  // Replace with your desired rosrun command\n        //   });\n\n        // cmd.publish(runCommand);\n\n        const goal = new window.ROSLIB.Goal({\n            actionClient: new window.ROSLIB.ActionClient({\n                ros: this.state.ros,\n                serverName: '/move_base',\n                actionName: 'move_base_msgs/MoveBaseAction'\n            }),\n            goalMessage: {\n                target_pose: {\n                    header: {\n                        frame_id: 'map'  // Replace with the desired frame ID\n                    },\n                    pose: {\n                        position: {\n                            x: 1.0,  // Replace with the desired position\n                            y: 2.0,\n                            z: 0.0\n                        },\n                        orientation: {\n                            x: 0.0,\n                            y: 0.0,\n                            z: 0.0,\n                            w: 1.0\n                        }\n                    }\n                }\n            }\n        });\n\n        goal.send();\n        console.log('Goal sent!');\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.sendCommand}>\n                    SET GOAL 2\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default SetGoal_2\n","/home/minhtan/Desktop/source_robot/robotservices/src/components/Map.jsx",["88","89"],"import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n  state = {\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    //this.init_connection = this.view_map.bind(this);\n    this.view_map = this.view_map.bind(this);\n  }\n\n  init_connection() {\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount\" + this.state.ros);\n    this.view_map();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480,\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div\">Viewer</div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","/home/minhtan/Desktop/source_robot/robotservices/src/scripts/config.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":9,"column":31,"nodeType":"96","messageId":"97","endLine":9,"endColumn":37},{"ruleId":"98","severity":1,"message":"99","line":26,"column":15,"nodeType":"100","messageId":"101","endLine":26,"endColumn":28},{"ruleId":"98","severity":1,"message":"102","line":27,"column":15,"nodeType":"100","messageId":"101","endLine":27,"endColumn":28},{"ruleId":"103","severity":1,"message":"104","line":13,"column":5,"nodeType":"105","messageId":"106","endLine":13,"endColumn":15},{"ruleId":"94","severity":1,"message":"107","line":2,"column":20,"nodeType":"96","messageId":"97","endLine":2,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":2,"column":31,"nodeType":"96","messageId":"97","endLine":2,"endColumn":37},{"ruleId":"103","severity":1,"message":"104","line":22,"column":5,"nodeType":"105","messageId":"106","endLine":22,"endColumn":15},{"ruleId":"94","severity":1,"message":"108","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":13},{"ruleId":"94","severity":1,"message":"109","line":2,"column":15,"nodeType":"96","messageId":"97","endLine":2,"endColumn":18},{"ruleId":"94","severity":1,"message":"107","line":2,"column":20,"nodeType":"96","messageId":"97","endLine":2,"endColumn":29},{"ruleId":"110","severity":1,"message":"111","line":63,"column":5,"nodeType":"112","messageId":"113","endLine":65,"endColumn":6},{"ruleId":"103","severity":1,"message":"104","line":16,"column":5,"nodeType":"105","messageId":"106","endLine":16,"endColumn":15},{"ruleId":"94","severity":1,"message":"108","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":13},{"ruleId":"94","severity":1,"message":"109","line":2,"column":15,"nodeType":"96","messageId":"97","endLine":2,"endColumn":18},{"ruleId":"94","severity":1,"message":"107","line":2,"column":20,"nodeType":"96","messageId":"97","endLine":2,"endColumn":29},{"ruleId":"103","severity":1,"message":"104","line":21,"column":9,"nodeType":"105","messageId":"106","endLine":21,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":17,"column":5,"nodeType":"105","messageId":"106","endLine":17,"endColumn":15},{"ruleId":"94","severity":1,"message":"114","line":51,"column":9,"nodeType":"96","messageId":"97","endLine":51,"endColumn":18},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component SetGoal_1 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component SetGoal_2 must be in PascalCase or SCREAMING_SNAKE_CASE","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","no-dupe-class-members","Duplicate name 'sendCommand'.","MethodDefinition","unexpected","'navClient' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]