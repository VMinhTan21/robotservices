{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","scripts/config.js","components/Connection.jsx","components/RobotState.jsx","components/Teleoperation.jsx","components/Map.jsx","components/Home.jsx","components/About.jsx","components/Body.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","Container","Navbar","bg","variant","expand","collapseOnSelect","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Component","Footer","state","Config","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","RECONNECTION_TIMER","CMD_VEL_TOPIC","ODOM_TOPIC","POSE_TOPIC","Connection","connected","ros","init_connection","this","window","ROSLIB","Ros","console","log","on","setState","setTimeout","connect","error","Alert","RobotState","x","y","orientation","linear_velocity","angular_velocity","getRobotState","Topic","name","messageType","subscribe","message","pose","position","toFixed","getOrientationFromQuaternion","twist","linear","angular","z","ros_orientation_quaternion","q","Three","w","setFromQuaternion","Math","PI","Row","Col","Teleoperation","handleMove","bind","handleStop","event","cmd_vel","Message","publish","size","baseColor","stickColor","move","stop","Map","view_map","viewer","ROS2D","Viewer","divID","width","height","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","Home","About","Body","path","exact","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAqBeA,E,uKAjBX,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAKC,kBAAgB,EAA7D,UACE,cAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,QAAnB,6BACA,cAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,cAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,mBAApB,SACE,eAACC,EAAA,EAAD,CAAKC,UAAU,UAAf,UACE,cAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,IAAf,kBACA,cAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,SAAf,iC,GAVOQ,aCYNC,E,4MAVbC,MAAQ,G,uDAEN,OACE,cAACjB,EAAA,EAAD,CAAWa,UAAU,cAArB,SACE,0D,GALaE,a,wBCMNG,EATA,CACbC,oBAAqB,gBACrBC,sBAAuB,OACvBC,mBAAoB,IACpBC,cAAe,WACfC,WAAY,QACZC,WAAY,eCmECC,E,kDAnEb,aAAe,IAAD,8BACZ,gBAHFR,MAAQ,CAAES,WAAW,EAAOC,IAAK,MAI/B,EAAKC,kBAFO,E,8DAKK,IAAD,OAChBC,KAAKZ,MAAMU,IAAM,IAAIG,OAAOC,OAAOC,IACnCC,QAAQC,IAAIL,KAAKZ,MAAMU,KAEvBE,KAAKZ,MAAMU,IAAIQ,GAAG,cAAc,WAC9BF,QAAQC,IAAI,2BACZ,EAAKE,SAAS,CAAEV,WAAW,OAG7BG,KAAKZ,MAAMU,IAAIQ,GAAG,SAAS,WACzBF,QAAQC,IAAI,yBACZ,EAAKE,SAAS,CAAEV,WAAW,IAE3BW,YAAW,WACT,IACE,EAAKpB,MAAMU,IAAIW,QACb,QACEpB,EAAOC,oBACP,IACAD,EAAOE,uBAGX,MAAOmB,GACPN,QAAQC,IAAI,0BAEbhB,EAAOG,uBAGZ,IACEQ,KAAKZ,MAAMU,IAAIW,QACb,QACEpB,EAAOC,oBACP,IACAD,EAAOE,uBAGX,MAAOmB,GACPN,QAAQC,IACN,QACEhB,EAAOC,oBACP,IACAD,EAAOE,uBAGXa,QAAQC,IAAI,0B,+BAKd,OACE,8BACE,cAACM,EAAA,EAAD,CACE3B,UAAU,kBACVV,QAAS0B,KAAKZ,MAAMS,UAAY,UAAY,SAF9C,SAIGG,KAAKZ,MAAMS,UAAY,kBAAoB,6B,GA/D7BX,a,wBCkJV0B,E,kDAtIb,aAAe,IAAD,8BACZ,gBAVFxB,MAAQ,CACNU,IAAK,KACLe,EAAG,EACHC,EAAG,EACHC,YAAa,EACbC,gBAAiB,EACjBC,iBAAkB,GAKlB,EAAKlB,kBAFO,E,8DAKK,IAAD,OAChBC,KAAKZ,MAAMU,IAAM,IAAIG,OAAOC,OAAOC,IACnCC,QAAQC,IAAIL,KAAKZ,MAAMU,KAEvBE,KAAKZ,MAAMU,IAAIQ,GAAG,cAAc,WAC9BF,QAAQC,IAAI,sDACZD,QAAQC,IAAI,EAAKjB,MAAMU,KACvB,EAAKS,SAAS,CAAEV,WAAW,OAG7BG,KAAKZ,MAAMU,IAAIQ,GAAG,SAAS,WACzBF,QAAQC,IAAI,yBACZ,EAAKE,SAAS,CAAEV,WAAW,IAE3BW,YAAW,WACT,IACE,EAAKpB,MAAMU,IAAIW,QACb,QACEpB,EAAOC,oBACP,IACAD,EAAOE,uBAGX,MAAOmB,GACPN,QAAQC,IAAI,0BAEbhB,EAAOG,uBAGZ,IACEQ,KAAKZ,MAAMU,IAAIW,QACb,QACEpB,EAAOC,oBACP,IACAD,EAAOE,uBAGX,MAAOmB,GACPN,QAAQC,IACN,QACEhB,EAAOC,oBACP,IACAD,EAAOE,uBAGXa,QAAQC,IAAI,0B,0CAKdL,KAAKkB,kB,sCAGU,IAAD,OAEQ,IAAIjB,OAAOC,OAAOiB,MAAM,CAC5CrB,IAAKE,KAAKZ,MAAMU,IAChBsB,KAAM/B,EAAOM,WACb0B,YAAa,4CAICC,WAAU,SAACC,GACzB,EAAKhB,SAAS,CAAEM,EAAGU,EAAQC,KAAKA,KAAKC,SAASZ,EAAEa,QAAQ,KACxD,EAAKnB,SAAS,CAAEO,EAAGS,EAAQC,KAAKA,KAAKC,SAASX,EAAEY,QAAQ,KACxD,EAAKnB,SAAS,CACZQ,YAAa,EAAKY,6BAChBJ,EAAQC,KAAKA,KAAKT,aAClBW,QAAQ,QAKY,IAAIzB,OAAOC,OAAOiB,MAAM,CAChDrB,IAAKE,KAAKZ,MAAMU,IAChBsB,KAAM/B,EAAOK,WACb2B,YAAa,sBAIKC,WAAU,SAACC,GAC7B,EAAKhB,SAAS,CACZS,gBAAiBO,EAAQK,MAAMA,MAAMC,OAAOhB,EAAEa,QAAQ,KAExD,EAAKnB,SAAS,CACZU,iBAAkBM,EAAQK,MAAMA,MAAME,QAAQC,EAAEL,QAAQ,U,mDAKjCM,GAC3B,IAAIC,EAAI,IAAIC,IACVF,EAA2BnB,EAC3BmB,EAA2BlB,EAC3BkB,EAA2BD,EAC3BC,EAA2BG,GAK7B,OAFU,IAAID,KAAcE,kBAAkBH,GAEpC,IAAU,IAAMI,KAAKC,M,+BAG/B,OACE,gCACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,oBAAIxD,UAAU,OAAd,sBACA,oBAAGA,UAAU,OAAb,gBAAwBgB,KAAKZ,MAAMyB,KACnC,oBAAG7B,UAAU,OAAb,gBAAwBgB,KAAKZ,MAAM0B,KACnC,oBAAG9B,UAAU,OAAb,0BAAkCgB,KAAKZ,MAAM2B,oBAGjD,cAACwB,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,oBAAIxD,UAAU,OAAd,wBACA,oBAAGA,UAAU,OAAb,8BACoBgB,KAAKZ,MAAM4B,mBAE/B,oBAAGhC,UAAU,OAAb,+BACqBgB,KAAKZ,MAAM6B,gC,GAvInB/B,a,gBC0HVuD,E,kDAxHb,aAAe,IAAD,8BACZ,gBAHFrD,MAAQ,CAAEU,IAAK,MAIb,EAAKC,kBAEL,EAAK2C,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBALN,E,8DAOK,IAAD,OAChB3C,KAAKZ,MAAMU,IAAM,IAAIG,OAAOC,OAAOC,IACnCC,QAAQC,IAAIL,KAAKZ,MAAMU,KAEvBE,KAAKZ,MAAMU,IAAIQ,GAAG,cAAc,WAC9BF,QAAQC,IAAI,sDACZD,QAAQC,IAAI,EAAKjB,MAAMU,KACvB,EAAKS,SAAS,CAAEV,WAAW,OAG7BG,KAAKZ,MAAMU,IAAIQ,GAAG,SAAS,WACzBF,QAAQC,IAAI,yBACZ,EAAKE,SAAS,CAAEV,WAAW,IAE3BW,YAAW,WACT,IACE,EAAKpB,MAAMU,IAAIW,QACb,QACEpB,EAAOC,oBACP,IACAD,EAAOE,uBAGX,MAAOmB,GACPN,QAAQC,IAAI,0BAEbhB,EAAOG,uBAGZ,IACEQ,KAAKZ,MAAMU,IAAIW,QACb,QACEpB,EAAOC,oBACP,IACAD,EAAOE,uBAGX,MAAOmB,GACPN,QAAQC,IACN,QACEhB,EAAOC,oBACP,IACAD,EAAOE,uBAGXa,QAAQC,IAAI,0B,iCAILwC,GACTzC,QAAQC,IAAI,eAEZ,IAAIyC,EAAU,IAAI7C,OAAOC,OAAOiB,MAAM,CACpCrB,IAAKE,KAAKZ,MAAMU,IAChBsB,KAAM/B,EAAOI,cACb4B,YAAa,wBAGXO,EAAQ,IAAI3B,OAAOC,OAAO6C,QAAQ,CACpClB,OAAQ,CACNhB,EAAGgC,EAAM/B,EAAI,GACbA,EAAG,EACHiB,EAAG,GAELD,QAAS,CACPjB,EAAG,EACHC,EAAG,EACHiB,GAAIc,EAAMhC,EAAI,MAIlBiC,EAAQE,QAAQpB,K,iCAEPiB,GACTzC,QAAQC,IAAI,eAEZ,IAAIyC,EAAU,IAAI7C,OAAOC,OAAOiB,MAAM,CACpCrB,IAAKE,KAAKZ,MAAMU,IAChBsB,KAAM/B,EAAOI,cACb4B,YAAa,wBAGXO,EAAQ,IAAI3B,OAAOC,OAAO6C,QAAQ,CACpClB,OAAQ,CACNhB,EAAG,EACHC,EAAG,EACHiB,EAAG,GAELD,QAAS,CACPjB,EAAG,EACHC,EAAG,EACHiB,EAAG,KAIPe,EAAQE,QAAQpB,K,+BAIhB,OACE,8BACE,cAAC,WAAD,CACEqB,KAAM,IACNC,UAAU,UACVC,WAAW,UACXC,KAAMpD,KAAK0C,WACXW,KAAMrD,KAAK4C,mB,GApHO1D,aCgEboE,E,kDA5Db,aAAe,IAAD,8BACZ,gBALFlE,MAAQ,CACNU,IAAK,MAML,EAAKyD,SAAW,EAAKA,SAASZ,KAAd,gBAHJ,E,8DAQZ3C,KAAKZ,MAAMU,IAAM,IAAIG,OAAOC,OAAOC,IACnCC,QAAQC,IAAI,OAASL,KAAKZ,MAAMU,KAChC,IACEE,KAAKZ,MAAMU,IAAIW,QACb,QACEpB,EAAOC,oBACP,IACAD,EAAOE,uBAGX,MAAOmB,GACPN,QAAQC,IACN,QACEhB,EAAOC,oBACP,IACAD,EAAOE,uBAGXa,QAAQC,IAAI,+D,0CAKdL,KAAKD,kBACLK,QAAQC,IAAI,yBAA2BL,KAAKZ,MAAMU,KAClDE,KAAKuD,a,iCAIL,IAAIC,EAAS,IAAIvD,OAAOwD,MAAMC,OAAO,CACnCC,MAAO,UACPC,MAAO,IACPC,OAAQ,MAEM,IAAI5D,OAAO6D,MAAMC,uBAAuB,CACtDjE,IAAKE,KAAKZ,MAAMU,IAChBkE,WAAYR,EAAOS,MACnBT,OAAQA,EACRU,WAAY,aACZC,iBAAiB,M,+BAKnB,OACE,8BACE,qBAAKrF,GAAG,UAAR,0B,GA3DUI,aCqCHkF,E,4MAjCbhF,MAAQ,G,uDAGN,OACE,8BACE,eAACjB,EAAA,EAAD,WACE,oBAAIa,UAAU,mBAAd,gCACA,cAACuD,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,QAGJ,cAACD,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,QAGJ,eAACD,EAAA,EAAD,WACG,IACD,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,MAEF,eAACA,EAAA,EAAD,WACE,qCACA,cAAC,EAAD,mB,GAzBKtD,aCWJmF,E,4MAdbjF,MAAQ,G,uDAEN,OACE,gCACE,uCACA,uH,GANYF,aCmBLoF,E,uKAbX,OACE,cAACnG,EAAA,EAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoG,KAAK,IAAIC,OAAK,EAACC,UAAWL,IACjC,cAAC,IAAD,CAAOG,KAAK,SAASC,OAAK,EAACC,UAAWJ,e,GAP/BnF,aCQJwF,MAVf,WACE,OACE,sBAAK1F,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCGS2F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ca12dfa2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Container, Navbar, Nav } from \"react-bootstrap\";\nclass Header extends Component {\n  render() {\n    return (\n      <Container>\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n          <Navbar.Brand href=\"#home\">React ROS Robot</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"/about\">About</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </Container>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nclass Footer extends Component {\n  state = {};\n  render() {\n    return (\n      <Container className=\"text-center\">\n        <p>RIOTU Lab &copy; 2020</p>\n      </Container>\n    );\n  }\n}\n\nexport default Footer;\n","const Config = {\n  ROSBRIDGE_SERVER_IP: \"192.168.8.101\",\n  ROSBRIDGE_SERVER_PORT: \"9090\",\n  RECONNECTION_TIMER: 3000,\n  CMD_VEL_TOPIC: \"/cmd_vel\",\n  ODOM_TOPIC: \"/odom\",\n  POSE_TOPIC: \"/robot_pose\",\n};\n\nexport default Config;\n","import React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Config from \"../scripts/config\";\nclass Connection extends Component {\n  state = { connected: false, ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established!\");\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Alert\n          className=\"text-center m-3\"\n          variant={this.state.connected ? \"success\" : \"danger\"}\n        >\n          {this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Connection;\n","import React, { Component } from \"react\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nimport * as Three from \"three\";\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    x: 0,\n    y: 0,\n    orientation: 0,\n    linear_velocity: 0,\n    angular_velocity: 0,\n  };\n\n  constructor() {\n    super();\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  componentDidMount() {\n    this.getRobotState();\n  }\n\n  getRobotState() {\n    //create a pose subscriber\n    var pose_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.POSE_TOPIC,\n      messageType: \"geometry_msgs/PoseWithCovarianceStamped\",\n    });\n\n    //create a pose callback\n    pose_subscriber.subscribe((message) => {\n      this.setState({ x: message.pose.pose.position.x.toFixed(2) });\n      this.setState({ y: message.pose.pose.position.y.toFixed(2) });\n      this.setState({\n        orientation: this.getOrientationFromQuaternion(\n          message.pose.pose.orientation\n        ).toFixed(2),\n      });\n    });\n\n    //create a subscriber for the velocities in the odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: \"nav_msgs/Odometry\",\n    });\n\n    //callback function for the odom\n    velocity_subscriber.subscribe((message) => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2),\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2),\n      });\n    });\n  }\n\n  getOrientationFromQuaternion(ros_orientation_quaternion) {\n    var q = new Three.Quaternion(\n      ros_orientation_quaternion.x,\n      ros_orientation_quaternion.y,\n      ros_orientation_quaternion.z,\n      ros_orientation_quaternion.w\n    );\n    //convert this quaternion into Roll, Pitch and Yaw\n    var RPY = new Three.Euler().setFromQuaternion(q);\n\n    return RPY[\"_z\"] * (180 / Math.PI);\n  }\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Position</h4>\n            <p className=\"mt-0\">x: {this.state.x}</p>\n            <p className=\"mt-0\">y: {this.state.y}</p>\n            <p className=\"mt-0\">Orientation: {this.state.orientation}</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <h4 className=\"mt-4\">Velocities</h4>\n            <p className=\"mt-0\">\n              Linear Velocity: {this.state.linear_velocity}\n            </p>\n            <p className=\"mt-0\">\n              Angular Velocity: {this.state.angular_velocity}\n            </p>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n","import React, { Component } from \"react\";\nimport { Joystick } from \"react-joystick-component\";\nimport Config from \"../scripts/config\";\n\nclass Teleoperation extends Component {\n  state = { ros: null };\n\n  constructor() {\n    super();\n    this.init_connection();\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n\n    this.state.ros.on(\"connection\", () => {\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({ connected: true });\n    });\n\n    this.state.ros.on(\"close\", () => {\n      console.log(\"connection is closed!\");\n      this.setState({ connected: false });\n      //try to reconnect every 3 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\n            \"ws://\" +\n              Config.ROSBRIDGE_SERVER_IP +\n              \":\" +\n              Config.ROSBRIDGE_SERVER_PORT +\n              \"\"\n          );\n        } catch (error) {\n          console.log(\"connection problem \");\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"connection problem \");\n    }\n  }\n\n  handleMove(event) {\n    console.log(\"handle move\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n  handleStop(event) {\n    console.log(\"handle stop\");\n    //we need to create a ROS publisher on the topic cmd_vel\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      messageType: \"geometry_msgs/Twist\",\n    });\n    //we need to create a twist message to be to published to rosbridge\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0,\n      },\n    });\n    //we need to publish the message on the cmd_vel topic\n    cmd_vel.publish(twist);\n  }\n\n  render() {\n    return (\n      <div>\n        <Joystick\n          size={100}\n          baseColor=\"#EEEEEE\"\n          stickColor=\"#BBBBBB\"\n          move={this.handleMove}\n          stop={this.handleStop}\n        ></Joystick>\n      </div>\n    );\n  }\n}\n\nexport default Teleoperation;\n","import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n  state = {\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    //this.init_connection = this.view_map.bind(this);\n    this.view_map = this.view_map.bind(this);\n  }\n\n  init_connection() {\n    //this.setState({ ros: new ROSLIB.Ros() });\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(\"Map:\" + this.state.ros);\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT +\n          \"\"\n      );\n      console.log(\"cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount\" + this.state.ros);\n    this.view_map();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480,\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div\">Viewer</div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport Connection from \"./Connection\";\nimport RobotState from \"./RobotState\";\nimport Teleoperation from \"./Teleoperation\";\nimport Map from \"./Map\";\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nclass Home extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <Container>\n          <h1 className=\"text-center mt-3\">Robot Control Page</h1>\n          <Row>\n            <Col>\n              <Connection />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Teleoperation />\n            </Col>\n          </Row>\n          <Row>\n            {\" \"}\n            <Col>\n              <RobotState />\n            </Col>\n            <Col>\n              <h1>MAP</h1>\n              <Map></Map>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass About extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <h1>About</h1>\n        <p>\n          This react app controls and monitors ROS-enabled robots through a Web\n          Interface\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport About from \"./About\";\n\nclass Body extends Component {\n  render() {\n    return (\n      <Container>\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={Home}></Route>\n            <Route path=\"/about\" exact component={About}></Route>\n          </Switch>\n        </Router>\n      </Container>\n    );\n  }\n}\n\nexport default Body;\n","import Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Body from \"./components/Body\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body></Body>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap/lux-bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}